#!/usr/bin/env python3
"""
TODO add rerun_failed option?
"""
import argparse
import math
import os

import psutil

import testjob_coordinator.core


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Run testjob_coordinator tests',
    )
    parser.add_argument(
        '-ps', '--packages-select', nargs='*', type=str, default=None,
        help='Packages for which to run tests.')
    parser.add_argument(
        '-ncpu', '--num_cpu_cores', type=int, default=None,
        help='Maximum number of CPU cores to use in total. If not specified, '
             'determined based on the currently available cores.')
    parser.add_argument(
        '-nram', '--ram_mb', type=int, default=None,
        help='Maximum amount of RAM in MB to use in total. If not specified, '
             'determined based on the currently available amount of RAM.')
    args = parser.parse_args()


    # If unspecified, set CPU and RAM to use based on available resources
    # and some simple heuristics
    if args.num_cpu_cores is None:
        # Use 90 % of what's available and at least one core
        # TODO use something else than psutil.cpu_count
        #      and only count cores allowed to be used by this process?
        # TODO concerning current usage, have to take into account clock speed?
        nb_cores = psutil.cpu_count(logical=True)
        cpu_ratio_used = psutil.cpu_percent(interval=1.0) / 100
        args.num_cpu_cores = nb_cores - cpu_ratio_used*nb_cores
        args.num_cpu_cores *= 0.9
        args.num_cpu_cores = max(1, math.floor(args.num_cpu_cores))
    else:
        assert args.num_cpu_cores >= 1
        assert args.num_cpu_cores <= psutil.cpu_count(logical=True)

    if args.ram_mb is None:
        # Use 90 % of currently available memory
        mem_info = psutil.virtual_memory()
        args.ram_mb = 0.9 * mem_info.available
    else:
        assert args.ram_mb >= 1
        assert args.ram_mb <= psutil.virtual_memory().total
    print(f'Running test session on {args.num_cpu_cores} logical cores '
          f'and {args.ram_mb/(1024**3):.1f} GB RAM.')


    # Gather YAML test files generated during the build and parse them
    packages = testjob_coordinator.core.get_packages(args.packages_select)
    # package name => list of parsed test files
    tests_to_run = testjob_coordinator.core.load_tests_from_packages(packages)
    tests_to_run = testjob_coordinator.core.sort_tests(tests_to_run)

    # Ensure the directories where the results will be stored exist
    for t in tests_to_run:
        if t.result:
            dirname = os.path.dirname(t.result)
            if not os.path.exists(dirname):
                os.makedirs(dirname)

    # Run them
    test_packages = frozenset(t.package for t in tests_to_run)
    print(f'Starting {len(tests_to_run)} tests of packages {" ".join(test_packages)}')
    coordinator = testjob_coordinator.core.TestJobCoordinator(
        tests_to_run, args.num_cpu_cores, args.ram_mb)
    coordinator.run()
    print('Completed test run')
